Требования:
1) Наличие пользователей. Пользователь имеет логин и никнейм
2) Авторизация и регистрация пользователей
3) Хранение собощений на сервере. Картинки и файлы хранятся в папке с запущенным сервером. В базе пути к этим файлам на диске
4) Обмен сообщениями между пользователями. Виды сообщений: текстовое, картинка, файл
5) Пользователи имеют личный список контактов
6) Поиск пользователей по логину или никнейму
7) Каналы для общения множества пользователей в одном чате
8) Черный список для личных сообщений
9) Состояния пользователя, видимые для других пользователей: доступен/в сети, отошел/не на месте, не в сети, занят

Задачи:
0) Написать базовый код для клиентской и серверной части
Проекты серверной части:
ChatServer (логика http)
ChatServer.Context (EF)
ChatServer.Common (общий код, без бизнес-логики)
ChatServer.Domain (классы бд)
ChatServer.Services (бизнес-логика приложения)
Проекты клиентской части:
ChatClient
ChatClient.Api
? ChatClient.Common
? ChatClient.Services

1.1) Сервер: Создать таблицу с пользователями в бд. Столбцы: Login, Name, PasswordHash
2.1) Сервер: POST /users. Body: {Login, Password}. Хеш вычисляется на сервере
2.2) Сервер: POST /login. Body: {Login, Password}. Return: jwt token
2.3) Клиент: Добавить методы в ChatClient.Api
3.1) Сервер: Создать таблицу с каналами: Channel (Name). Создать таблицы с сообщенями: UserMessages (UserFrom, UserTo, Message, FilePath, CreatedAt), ChannelMessages (UserFrom, Channel, Message, FilePath, CreatedAt). Реализовать логику сохранения картинок и файлов
3.2) Сервер: POST /messages. Body: {UserTo, Message, File}
3.3) Сервер: GET /messages?userTo={id}&after={datetime}. Сообщения с картинками и файлами имеют свойство hasFile=true вместо контента
3.4) Сервер: GET /messages/{id}
4.1) Клиент: Добавить методы 3 задачи в ChatClient.Api
4.2) Собрать MVP клиента с импользованием всех уже написанных методов
5.1) Сервер: Создать таблицу с контактами: UserContacts (User, Contact (FK to Users)).
5.2) Сервер: POST contacts/{id} - добавляет запись в таблицу UserContacts (пользователь из токена) - id (id юзера из url)
5.3) Сервер: DELETE contacts/{id} - удаляет запись из таблицы UserContacts
5.4) Сервер: GET /contacts - вернуть всех пользователей для текущего пользователя (пользователь из токена)
5.5) Клиент: Добавить методы ChatClient.Api
5.6) Клиент: UI для работы со списком контактов
6.1) Сервер: GET /users - список всех ползователей
6.2) Клиент: Написать код поиска в ChatClient.Services
6.3) Клиент: UI для работы с поиском пользователей
7.1) Сервер: POST /channels. Body {Name}
7.2) Сервер: GET /channels/{id}
7.3) Сервер: POST /channels/{id}/messages. Body: {UserTo, Message, File}
7.4) Сервер: GET /channels/{id}/messages?userTo={id}
7.5) Сервер: GET /channels/{id}/messages/{id}
7.6) Клиент: Добавить методы ChatClient.Api
7.7) Клиент: UI для работы с каналами
8.1) Сервер: Создать таблицу с ЧС: UserBlocks (User, Block (FK to Users)).
8.2) Сервер: POST /blocks/{id} - добавляет запись в таблицу UserBlocks (пользователь из токена) - id (id юзера из url)
8.3) Сервер: DELETE /blocks/{id} - удаляет запись из таблицы UserBlocks
5.4) Сервер: GET /blocks - вернуть все блокировки для текущего пользователя (пользователь из токена)
8.4) Клиент: Добавить методы ChatClient.Api
8.5) Клиент: UI для работы с ЧС
9.1) Сервер: Хранение статусов в памяти (код в ChatServer.Services)
9.2) Сервер: PUT /settings - Изменение статуса для текущего пользователя (пользователь из токена)
9.2) Сервер: Возвращать статус в GET /users